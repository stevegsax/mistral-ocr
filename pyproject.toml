
[project]
name = "mistral-ocr"
version = "0.6.0"
description = "Command line tool to submit, query, and retrieve Mistral AI batch OCR"
readme = "README.md"
requires-python = ">=3.12"
authors = [
    {name = "Steven Greenberg", email = "steve@example.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
keywords = ["ocr", "mistral", "ai", "batch", "text-extraction", "cli"]
dependencies = [
    "httpx>=0.28.1",
    "mistralai>=1.7.1",
    "pydantic>=2.11.5",
    "structlog>=25.3.0",
    "rich>=13.0.0",
]

[project.scripts]
mistral-ocr = "mistral_ocr.__main__:main"

[project.optional-dependencies]
dev = [
    "pytest>=8.3.5",
    "pytest-asyncio>=1.0.0", 
    "mypy>=1.0.0",
    "ruff>=0.4.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
asyncio_mode = "auto"
markers = [
    "unit: Unit tests with mocked dependencies",
    "integration: Integration tests that may use real APIs",
    "asyncio: Async tests"
]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
ignore_missing_imports = true

[tool.ruff.lint]
select = ["E", "F", "I"]

[dependency-groups]
dev = [
    "pytest>=8.3.5",
    "pytest-asyncio>=1.0.0",
    "pytest-httpx>=0.35.0",
]

[tool.ruff]
line-length = 100
target-version = "py312"

